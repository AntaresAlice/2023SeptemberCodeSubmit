import time
import timeit
import os
import sys
import re

note = ""
global output_file_for_analyze
output_file_for_analyze= ""
    
def batch_cube_scan_test(column_num, density_argvs):

    logtime = time.strftime("%H-%M-%S-%m-%d-%y")
    
    global note
    if note != "":
        note = "-" + note

    output_file = "log/{}-search-cube-{}{}.log".format(logtime,column_num,note)
    global output_file_for_analyze
    output_file_for_analyze = output_file
    
    

    for density_argv in density_argvs:
        segment_num = density_argv[0]
        density_width = density_argv[1]
        density_height = density_argv[2]
        if len(density_argv) > 3:
            ray_length = density_argv[3]
        else:
            ray_length = 6000000
        args = "-b {} -s {} -w {} -m {} -t {}".format(column_num, segment_num, density_width, density_height, ray_length)
        print(args)

        # cmd = "sudo ./bindex " + args + " -f ./normal_data_1e8_3.dat >> " + output_file
        cmd = "sudo ./bindex " + args + " -f ./uniform_data_1e8_3.dat >> " + output_file

        print(cmd)
        os.system(cmd)
   



cmd = sys.argv[1]

# os.system("make clean")
# os.system("make")
# os.system("sudo ./bindex -c -f ./uniform_data_1e8_3.dat")

if len(sys.argv) < 3:
    print("Usage: scan-blocksize.py <mode> <blockSize/columnNum> <note>")
    exit(0)
    
if len(sys.argv) >= 3:
    note = sys.argv[3]

if cmd == "batchcube":
    os.system("make")
    column_num = sys.argv[2]
    density_argvs = [        
                #######    20    #######
        (1,20,20,1000000), # 1M
        # (1,20,20,2000000), # 2M
        # (1,20,20,3000000), # 3M
        (1,20,20,6000000), #  6M
        (1,20,20,12000000), # 12M
        # (1,20,20,18000000), # 18M
        (1,20,20,24000000), # 24M
        # (1,20,20,30000000), # 30M
        (1,20,20,36000000),   # 36M
        # (1,20,20,42000000),   # 42M
        (1,20,20,48000000),   # 48M
        (1,20,20,54000000),   # 54M
        (1,20,20,60000000),   # 60M
        (1,20,20,100000000),   # 100M
        (1,20,20,360000000),   # 360M
        (1,20,20,420000000),   # 420M
        (1,20,20,480000000),   # 480M
        (1,20,20,540000000),   # 540M
        (1,20,20,600000000),   # 600M
        (1,20,20,1000000000),   # 1B
        
        #######    120    #######
        (1,120,120,1000000), # 1M
        # (1,120,120,2000000), # 2M
        # (1,120,120,3000000), # 3M
        (1,120,120,6000000), #  6M
        (1,120,120,12000000), # 12M
        # (1,120,120,18000000), # 18M
        (1,120,120,24000000), # 24M
        # (1,120,120,30000000), # 30M
        (1,120,120,36000000),   # 36M
        # (1,120,120,42000000),   # 42M
        (1,120,120,48000000),   # 48M
        (1,120,120,54000000),   # 54M
        (1,120,120,60000000),   # 60M
        (1,120,120,100000000),   # 100M
        (1,120,120,360000000),   # 360M
        (1,120,120,420000000),   # 420M
        (1,120,120,480000000),   # 480M
        (1,120,120,540000000),   # 540M
        (1,120,120,600000000),   # 600M
        (1,120,120,1000000000),   # 1B
        
        #######    200    #######
        (1,200,200,1000000), # 1M
        # (1,200,200,2000000), # 2M
        # (1,200,200,3000000), # 3M
        (1,200,200,6000000), #  6M
        (1,200,200,12000000), # 12M
        # (1,200,200,18000000), # 18M
        (1,200,200,24000000), # 24M
        # (1,200,200,30000000), # 30M
        (1,200,200,36000000),   # 36M
        # (1,200,200,42000000),   # 42M
        (1,200,200,48000000),   # 48M
        (1,200,200,54000000),   # 54M
        (1,200,200,60000000),   # 60M
        (1,200,200,100000000),   # 100M
        (1,200,200,360000000),   # 360M
        (1,200,200,420000000),   # 420M
        (1,200,200,480000000),   # 480M
        (1,200,200,540000000),   # 540M
        (1,200,200,600000000),   # 600M
        (1,200,200,1000000000),   # 1B

        #######    300    #######
        (1,300,300,1000000), # 1M
        # (1,300,300,2000000), # 2M
        # (1,300,300,3000000), # 3M
        (1,300,300,6000000), #  6M
        (1,300,300,12000000), # 12M
        # (1,300,300,18000000), # 18M
        (1,300,300,24000000), # 24M
        # (1,300,300,30000000), # 30M
        (1,300,300,36000000),   # 36M
        # (1,300,300,42000000),   # 42M
        (1,300,300,48000000),   # 48M
        (1,300,300,54000000),   # 54M
        (1,300,300,60000000),   # 60M
        (1,300,300,100000000),   # 100M
        (1,300,300,360000000),   # 360M
        (1,300,300,420000000),   # 420M
        (1,300,300,480000000),   # 480M
        (1,300,300,540000000),   # 540M
        (1,300,300,600000000),   # 600M
        (1,300,300,1000000000),   # 1B
        
        #######    400    #######
        (1,400,400,1000000), # 1M
        # (1,400,400,2000000), # 2M
        # (1,400,400,3000000), # 3M
        (1,400,400,6000000), #  6M
        (1,400,400,12000000), # 12M
        # (1,400,400,18000000), # 18M
        (1,400,400,24000000), # 24M
        # (1,400,400,30000000), # 30M
        (1,400,400,36000000),   # 36M
        # (1,400,400,42000000),   # 42M
        (1,400,400,48000000),   # 48M
        (1,400,400,54000000),   # 54M
        (1,400,400,60000000),   # 60M
        (1,400,400,100000000),   # 100M
        (1,400,400,360000000),   # 360M
        (1,400,400,420000000),   # 420M
        (1,400,400,480000000),   # 480M
        (1,400,400,540000000),   # 540M
        (1,400,400,600000000),   # 600M
        (1,400,400,1000000000),   # 1B
        
                        #######    600    #######
        (1,600,600,1000000), # 1M
        # (1,600,600,2000000), # 2M
        # (1,600,600,3000000), # 3M
        (1,600,600,6000000), #  6M
        (1,600,600,12000000), # 12M
        # (1,600,600,18000000), # 18M
        (1,600,600,24000000), # 24M
        # (1,600,600,30000000), # 30M
        (1,600,600,36000000),   # 36M
        # (1,600,600,42000000),   # 42M
        (1,600,600,48000000),   # 48M
        (1,600,600,54000000),   # 54M
        (1,600,600,60000000),   # 60M
        (1,600,600,100000000),   # 100M
        (1,600,600,360000000),   # 360M
        (1,600,600,420000000),   # 420M
        (1,600,600,480000000),   # 480M
        (1,600,600,540000000),   # 540M
        (1,600,600,600000000),   # 600M
        (1,600,600,1000000000),   # 1B
        
        
        #######    800    #######
        (1,800,800,1000000), # 1M
        # (1,800,800,2000000), # 2M
        # (1,800,800,3000000), # 3M
        (1,800,800,6000000), #  6M
        (1,800,800,12000000), # 12M
        # (1,800,800,18000000), # 18M
        (1,800,800,24000000), # 24M
        # (1,800,800,30000000), # 30M
        (1,800,800,36000000),   # 36M
        # (1,800,800,42000000),   # 42M
        (1,800,800,48000000),   # 48M
        (1,800,800,54000000),   # 54M
        (1,800,800,60000000),   # 60M
        (1,800,800,100000000),   # 100M
        (1,800,800,360000000),   # 360M
        (1,800,800,420000000),   # 420M
        (1,800,800,480000000),   # 480M
        (1,800,800,540000000),   # 540M
        (1,800,800,600000000),   # 600M
        (1,800,800,1000000000),   # 1B
        
        
        #######    1200    #######
        # (1,1200,1200,500000),   # 0.5M
        (1,1200,1200,1000000), # 1M
        # (1,1200,1200,2000000), # 2M
        # (1,1200,1200,3000000), # 3M
        
        # (1,1200,1200,5400000),   # 5.4M
        (1,1200,1200,6000000), #  6M
        (1,1200,1200,12000000), # 12M
        # (1,1200,1200,18000000), # 18M
        (1,1200,1200,24000000), # 24M
        # (1,1200,1200,30000000), # 30M

        (1,1200,1200,36000000),   # 36M
        # (1,1200,1200,42000000),   # 42M
        (1,1200,1200,48000000),   # 48M
        (1,1200,1200,54000000),   # 54M
        (1,1200,1200,60000000),   # 60M
        
        (1,1200,1200,100000000),   # 100M
        (1,1200,1200,360000000),   # 360M
        (1,1200,1200,420000000),   # 420M
        (1,1200,1200,480000000),   # 480M
        (1,1200,1200,540000000),   # 540M
        (1,1200,1200,600000000),   # 600M
        (1,1200,1200,1000000000),   # 1B
        
        # (1,1200,1200,1500000000),  # 1.5B
        
        
        #######    1600    #######
        (1,1600,1600,1000000), # 1M
        # (1,1600,1600,2000000), # 2M
        # (1,1600,1600,3000000), # 3M
        (1,1600,1600,6000000), #  6M
        (1,1600,1600,12000000), # 12M
        # (1,1600,1600,18000000), # 18M
        (1,1600,1600,24000000), # 24M
        # (1,1600,1600,30000000), # 30M
        (1,1600,1600,36000000),   # 36M
        # (1,1600,1600,42000000),   # 42M
        (1,1600,1600,48000000),   # 48M
        (1,1600,1600,54000000),   # 54M
        (1,1600,1600,60000000),   # 60M
        (1,1600,1600,100000000),   # 100M
        (1,1600,1600,360000000),   # 360M
        (1,1600,1600,420000000),   # 420M
        (1,1600,1600,480000000),   # 480M
        (1,1600,1600,540000000),   # 540M
        (1,1600,1600,600000000),   # 600M
        (1,1600,1600,1000000000),   # 1B
        
        #######    2000    #######
        (1,2000,2000,1000000), # 1M
        # (1,2000,2000,2000000), # 2M
        # (1,2000,2000,3000000), # 3M
        (1,2000,2000,6000000), #  6M
        (1,2000,2000,12000000), # 12M
        # (1,2000,2000,18000000), # 18M
        (1,2000,2000,24000000), # 24M
        # (1,2000,2000,30000000), # 30M
        (1,2000,2000,36000000),   # 36M
        # (1,2000,2000,42000000),   # 42M
        (1,2000,2000,48000000),   # 48M
        (1,2000,2000,54000000),   # 54M
        (1,2000,2000,60000000),   # 60M
        (1,2000,2000,100000000),   # 100M
        (1,2000,2000,360000000),   # 360M
        (1,2000,2000,420000000),   # 420M
        (1,2000,2000,480000000),   # 480M
        (1,2000,2000,540000000),   # 540M
        (1,2000,2000,600000000),   # 600M
        (1,2000,2000,1000000000),   # 1B
    ]
    # density_argvs = [(1,1200,1200,48000000)]
    batch_cube_scan_test(column_num, density_argvs)

def getRefineTimeCount(logfile, countStep = 0.1):
    X = []
    Y = []
    count = 0
    with open(logfile,"r") as f:
        data = f.read()
        lines = data.split("\n")
        for line in lines:
            words = re.split(r"[ ]+", line)
            if words[0] == "[Time]":
                if words[1] == "refine:":
                    used_time = float(words[2])
                    Y.append(used_time)
                    X.append(count)
                    count += countStep
    return X,Y

def getRaynumCount(logfile, countStep = 0.1):
    X = []
    Y = []
    count = 0
    with open(logfile,"r") as f:
        data = f.read()
        lines = data.split("\n")
        for line in lines:
            words = re.split(r"[ ]+", line)
            if words[0] == "[OptiX]":
                if words[1] == "launch_width":
                    used_time = float(words[-1])
                    Y.append(used_time)
                    X.append(count)
                    count += countStep
    return X,Y

if output_file_for_analyze != "":
    print(getRefineTimeCount(output_file_for_analyze))
    print(getRaynumCount(output_file_for_analyze))

exit(0)

# sorted_scan_test(blocksize)
# unsorted_scan_test(blocksize)
""" drawcmd = "python3 draw.py 32 {} {}".format(file1,file2)
print(drawcmd)
os.system(drawcmd)
 """